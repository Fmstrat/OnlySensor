substitutions:
  update_interval: '60s' # every 1 minute
  window_size: '60' # every 1 minute for 1 hour
  send_every: '1' # every 1 minute
  send_first_at: '1' # first minute

esphome:
  name: "only-sensor-8-aq"
  friendly_name: "Only Sensor 8-AQ"

esp8266:
  board: d1_mini

# Logging
logger:
  # baud_rate: 0
  logs:
    sensor: INFO
    binary_sensor: INFO
    text_sensor: INFO

# Home Assistant API
api:
  encryption:
    key: !secret ha_api_encryption_key
  # Can comment this to reboot with no API
  reboot_timeout: 0s

# OTA
ota:
  safe_mode: true
  password: !secret ota_pass
  port: 3232

# Wifi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .corp.nowsci.com
  # Hotspot fallback
  ap:
    ssid: !secret wifi_ap_ssid
    password: !secret wifi_ap_pass
captive_portal:

# Web server
web_server:
  port: 80
  version: 2
  include_internal: true
  ota: true
  local: true
  auth:
    username: !secret web_server_auth_user
    password: !secret web_server_auth_pass

switch:
  # Switch for toggling safe mode
  - platform: safe_mode
    name: "Use safe mode"
    id: use_safe_mode

button:
  # Restart
  - platform: restart
    name: "Restart"
    id: restart_os5

i2c:
  sda: D2
  scl: D1
  # scan: true

text_sensor:
  - platform: template
    name: " PM <2.5 AQI Description"
    icon: "mdi:air-filter"
    id: pm_2_5_aqi_description

  - platform: template
    name: " PM <2.5 AQI Color"
    icon: "mdi:air-filter"
    id: pm_2_5_aqi_color

  - platform: template
    name: " PM <10.0 AQI Description"
    icon: "mdi:air-filter"
    id: pm_10_0_aqi_description

  - platform: template
    name: " PM <10.0 AQI Color"
    icon: "mdi:air-filter"
    id: pm_10_0_aqi_color

  - platform: template
    name: " PM AQI Description"
    icon: "mdi:air-filter"
    id: pm_aqi_description
    update_interval: 60s
    lambda: |-
      if (id(pm_2_5_aqi).state > id(pm_10_0_aqi).state) {
        return id(pm_2_5_aqi_description).state;
      } else {
        return id(pm_10_0_aqi_description).state;
      }

  - platform: template
    name: " PM AQI Color"
    icon: "mdi:air-filter"
    id: pm_aqi_color
    update_interval: 60s
    lambda: |-
      if (id(pm_2_5_aqi).state > id(pm_10_0_aqi).state) {
        return id(pm_2_5_aqi_color).state;
      } else {
        return id(pm_10_0_aqi_color).state;
      }


sensor:
  # Uptime sensor
  - platform: uptime
    name: "Uptime"
    icon: mdi:clock-start
    update_interval: 60s

  # Air quality
  - platform: sen5x
    id: sen55
    pm_1_0:
      name: " PM <1µm"
      id: pm_1_0
      accuracy_decimals: 1
    pm_2_5:
      name: " PM <2.5µm"
      id: pm_2_5
      accuracy_decimals: 1
    pm_4_0:
      name: " PM <4µm"
      id: pm_4_0
      accuracy_decimals: 1
    pm_10_0:
      name: " PM <10µm"
      id: pm_10_0
      accuracy_decimals: 1
    temperature:
      name: "Temperature"
      accuracy_decimals: 1
    humidity:
      name: "Humidity"
      accuracy_decimals: 0
    voc:
      name: "VOC"
      algorithm_tuning:
        index_offset: 100
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
    nox:
      name: "NOX"
      id: nox
      algorithm_tuning:
        index_offset: 1
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 720
        std_initial: 50
        gain_factor: 230
    temperature_compensation:
      offset: 0
      normalized_offset_slope: 0
      time_constant: 0
    acceleration_mode: low
    store_baseline: true
    #address: 0x69
    update_interval: ${update_interval}

  - platform: copy
    source_id: pm_2_5
    id: pm_2_5_average
    name: " PM <2.5µm Average 24h"
    accuracy_decimals: 1
    filters:
    - sliding_window_moving_average:
        window_size: ${window_size}
        send_every: ${send_every}
        send_first_at: ${send_first_at}
    on_value:
      lambda: |-
        static int i = 0;
        i++;
        if (i >= 1) { // Don't run until after N send_every
          // Values: https://en.wikipedia.org/wiki/Air_quality_index#United_States
          // Formula: https://forum.airnowtech.org/t/the-aqi-equation/169
          if (id(pm_2_5).state <= 9.0) {
            // good
            id(pm_2_5_aqi_description).publish_state("Good");
            id(pm_2_5_aqi_color).publish_state("Green");
            id(pm_2_5_aqi).publish_state((50.0 - 0.0) / (9.0 - 0.0) * (id(pm_2_5).state - 0.0) + 0.0);
          } else if (id(pm_2_5).state <= 35.4) {
            // moderate
            id(pm_2_5_aqi_description).publish_state("Moderate");
            id(pm_2_5_aqi_color).publish_state("Yellow");
            id(pm_2_5_aqi).publish_state((100.0 - 51.0) / (35.4 - 9.1) * (id(pm_2_5).state - 9.1) + 51.0);
          } else if (id(pm_2_5).state <= 55.4) {
            // Unhealthy for Sensitive Groups
            id(pm_2_5_aqi_description).publish_state("Unhealthy for Sensitive Groups");
            id(pm_2_5_aqi_color).publish_state("Orange");
            id(pm_2_5_aqi).publish_state((150.0 - 101.0) / (55.4 - 35.5) * (id(pm_2_5).state - 35.5) + 101.0);
          } else if (id(pm_2_5).state <= 125.4) {
            // unhealthy
            id(pm_2_5_aqi_description).publish_state("Unhealthy");
            id(pm_2_5_aqi_color).publish_state("Red");
            id(pm_2_5_aqi).publish_state((200.0 - 151.0) / (125.4 - 55.5) * (id(pm_2_5).state - 55.5) + 151.0);
          } else if (id(pm_2_5).state <= 225.4) {
            // very unhealthy
            id(pm_2_5_aqi_description).publish_state("Very Unhealthy");
            id(pm_2_5_aqi_color).publish_state("Purple");
            id(pm_2_5_aqi).publish_state((300.0 - 201.0) / (225.4 - 125.5) * (id(pm_2_5).state - 125.5) + 201.0);
          } else if (id(pm_2_5).state >= 225.5) {
            // hazardous
            id(pm_2_5_aqi_description).publish_state("Hazardous");
            id(pm_2_5_aqi_color).publish_state("Brown");
            id(pm_2_5_aqi).publish_state((500.0 - 301.0) / (325.4 - 225.5) * (id(pm_2_5).state - 225.5) + 301.0);
          }
        }

  - platform: template
    name: " PM <2.5 AQI"
    unit_of_measurement: "aqi"
    icon: "mdi:air-filter"
    accuracy_decimals: 1
    id: pm_2_5_aqi

  - platform: copy
    source_id: pm_10_0
    id: pm_10_0_average
    name: " PM <10.0µm Average 24h"
    accuracy_decimals: 1
    filters:
    - sliding_window_moving_average:
        window_size: ${window_size}
        send_every: ${send_every}
        send_first_at: ${send_first_at}
    on_value:
      lambda: |-
        static int i = 0;
        i++;
        if (i >= 1) { // Don't run until after N send_every
          // Values: https://en.wikipedia.org/wiki/Air_quality_index#United_States
          // Formula: https://forum.airnowtech.org/t/the-aqi-equation/169
          if (id(pm_10_0).state <= 54.0) {
            // good
            id(pm_10_0_aqi_description).publish_state("Good");
            id(pm_10_0_aqi_color).publish_state("Green");
            id(pm_10_0_aqi).publish_state((50.0 - 0.0) / (54.0 - 0.0) * (id(pm_10_0).state - 0.0) + 0.0);
          } else if (id(pm_10_0).state <= 154.0) {
            // moderate
            id(pm_10_0_aqi_description).publish_state("Moderate");
            id(pm_10_0_aqi_color).publish_state("Yellow");
            id(pm_10_0_aqi).publish_state((100.0 - 51.0) / (154.0 - 55.0) * (id(pm_10_0).state - 55.0) + 51.0);
          } else if (id(pm_10_0).state <= 254.0) {
            // Unhealthy for Sensitive Groups
            id(pm_10_0_aqi_description).publish_state("Unhealthy for Sensitive Groups");
            id(pm_10_0_aqi_color).publish_state("Orange");
            id(pm_10_0_aqi).publish_state((150.0 - 101.0) / (254.0 - 155.0) * (id(pm_10_0).state - 155.0) + 101.0);
          } else if (id(pm_10_0).state <= 354.0) {
            // unhealthy
            id(pm_10_0_aqi_description).publish_state("Unhealthy");
            id(pm_10_0_aqi_color).publish_state("Red");
            id(pm_10_0_aqi).publish_state((200.0 - 151.0) / (354.0 - 255.0) * (id(pm_10_0).state - 255.0) + 151.0);
          } else if (id(pm_10_0).state <= 424.0) {
            // very unhealthy
            id(pm_10_0_aqi_description).publish_state("Very Unhealthy");
            id(pm_10_0_aqi_color).publish_state("Purple");
            id(pm_10_0_aqi).publish_state((300.0 - 201.0) / (424.0 - 355.0) * (id(pm_10_0).state - 355.0) + 201.0);
          } else if (id(pm_10_0).state >= 425.0) {
            // hazardous
            id(pm_10_0_aqi_description).publish_state("Hazardous");
            id(pm_10_0_aqi_color).publish_state("Brown");
            id(pm_10_0_aqi).publish_state((500.0 - 301.0) / (604.0 - 425.0) * (id(pm_10_0).state - 425.0) + 301.0);
          }
        }

  - platform: template
    name: " PM <10.0 AQI"
    unit_of_measurement: "aqi"
    icon: "mdi:air-filter"
    accuracy_decimals: 1
    id: pm_10_0_aqi

  - platform: template
    name: " PM AQI"
    unit_of_measurement: "aqi"
    icon: "mdi:air-filter"
    accuracy_decimals: 1
    id: pm_aqi
    update_interval: 60s
    lambda: |-
      if (id(pm_2_5_aqi).state > id(pm_10_0_aqi).state) {
        return id(pm_2_5_aqi).state;
      } else {
        return id(pm_10_0_aqi).state;
      }
